#!/usr/local/bin/perl -w
use strict;
use warnings;

use AnyEvent;
use AnyEvent::Ping;

use YAML::Syck;
use Getopt::Long;

die "Run me as root, needed for ICMP ping\n"
	if $<;
my %opt = (
	"n|nodes=s@"   => "List of nodes to ping, listed multiple times as -n node1 -n node2...",
	"h|help"       => "Prints this help",
	"v|verbose"    => "Prints more info",
	"c|config=s"   => "YAML config file with array of hosts, will add -n hosts to this if present",
	"z|zero"       => "Return 0 lat for unpingable nodes, else will remove these nodes from response",
	"d|dumpfile=s" => "YAML dumpfile to dump data, useful for watchers, adds .epoch.yaml suffix to input",
	"t|timeout=i"  => "Timeout for each node, default 3 seconds",
	"K|kill=i"     => "Kills the ping after this many seconds, default 30",
);


my %inp;
GetOptions(\%inp, keys %opt)
	or usage();

usage() if $inp{h};
sub usage {
	print "Usage: $0 [options], where options are:\n";
	map {
		my ($a,$b) = split(/\|/,$_);$b = $a unless $b;$b=~s/=.+//;
		printf("  -%s --%-10s  %s\n",$a,$b,$opt{$_});
	} keys %opt;
	exit(1);
}

#use constant { 
#	Y_APP  => 'pinger',
#};

#my $push     = $inp{p};
my $verbose  = $inp{v};
my $config   = ($inp{c} and -r $inp{c}) ? YAML::Syck::LoadFile($inp{c}) : undef();
my @nodes    = @$config if $config;
my $zero     = $inp{z};
my $dumpfile = $inp{d};
my $timeout  = $inp{t} ||= 3;
my $kill     = $inp{K} ||= 30;
my $cv       = AnyEvent->condvar();
my $ping     = AnyEvent::Ping->new();


alarm($kill);
$SIG{ALRM}  = sub { 
	warn "Process timed out at ",scalar localtime(time()),"\n";
	exit(1);
};

push(@nodes,@{$inp{n}}) if $inp{n};
die "No nodes to ping\n" unless @nodes;
my %ret      = map { $_ => undef } @nodes;	 # Initialize as undef


for my $node (@nodes) { 
	# Resolv since anyevent-ping crashes if the target does not resolve.
	resolv($node) || next;
	$cv->begin();
	eval { 
	$ping->ping($node,$timeout,sub { 
		my $res     = shift;
		if($res->[0][0] ne 'OK') { 
			$ret{$node} = undef();
		}
		else { 
			$ret{$node} = $res->[0][1] * 1000; # ms
		}
		$cv->end();
	}
	);
	};
	if($@) { 
		chomp($@);
		warn "Pinger for $node reported ", $ping->error() ?  $ping->error()  : "$@", "\n";
	}
}

$cv->recv();
$ping->end();


if ($dumpfile) { 
	$dumpfile .= "." . time() . ".yaml";
	YAML::Syck::DumpFile($dumpfile,\%ret);
}

# Normalize this, set to 0 or not return? Added as a passable parameter -z
$zero	?  map { $ret{$_} = 0    unless defined  $ret{$_} } keys %ret
	:  map { delete $ret{$_} unless defined  $ret{$_} } keys %ret;

print YAML::Syck::Dump \%ret if $verbose;


sub resolv { 
	my ($node) = @_;
	use Socket;
	my ($ia,$ip);
	eval { 
		$ia = inet_aton($node);
		if(defined($ia)) { 
			$ip = gethostbyaddr($ia,AF_INET)||undef;
		}
		else { 
			return;
		}
	};
	if($@) { return };
	if(defined($ip)) { return $ip };
	return;
	
}
# vim: se tabstop=8 :


__END__
#!/usr/bin/perl -W
# vim: set tabstop=4 fdm=marker :
# Parallely ping multiple hosts over ipv4 and ipv6
# Return results in a yaml, additionally send latency.
# ./pinger  -r <range> -6    -v -y yams
# ./pinger  -r <range>     -v -u /tmp/dumpfile (.timestamp.yaml added by script)

# This is waiting on bug 6915947. We need it added as a ports package.

use strict;

use Range;
use Crazy qw(:all);

use YAML::Syck;
use JSON::Syck;
use Net::Oping;
use Net::Domain;
use Getopt::Long;


die "Run me as root, required for icmp.\n" if $<;



use constant Y_APP => 'pinger';

my %opt = (
	"h|help"          => "Prints help",
	"v|verbose"       => "Verbose mode",
	"n|nodes=s@"      => "Hosts to ping, use -h host1 -h host2 ...",
	"6|v6"            => "Ping using ipv6 if available",
	"t|ttl=i"         => "TTL for ping, 1-255, not normally required",
	"f|file=s"        => "Read hosts from a file",
	"d|timeout=i"     => "Timeout for ping, defult 5 seconds",
	"r|range=s"       => "Range to act on",
	"u|dumpfile=s"    => "YAML Dump file, timestamped",
	"l|filter=s"      => "Filter to dump output to, can be used to send data to monitoring other than yms",
);

my %inp;

sub usage {
    print "Usage: $0 [opts], where opts are:\n";
    map {
        my ( $va, $vb ) = ( split(/\|/) );
        $vb =~ s/=.+// if $vb;
        printf "\t-%s  --%-10s%s\n",
            $va, $vb ? $vb : $va, $opt{$_};
    } sort keys %opt;
	print "eg: ./pinger  -r <range>    -v  -u /tmp/foo\n";
    exit 1;
}


GetOptions(\%inp,keys %opt)
        or die "Unable to get options\n";


my $hostname = Net::Domain::hostfqdn();
#my $colo;



my $now     = time();
my $v6      = $inp{6};
my $timeout = $inp{d} ||= '5';
my $verbose = $inp{v};
my $ttl     = $inp{t};
my @nodes   = @{$inp{n}} if $inp{n};

my $range   = $inp{r};
my $dump    = $inp{u};
my $file    = $inp{f};
my $filter  = $inp{l};

my @range;

if ($dump) {
	$dump .= '-' . $now . '.yaml';
}

if ($range) {
	my $r   = Range->new();
	@range    = $r->expand($range);

}

if ($file) {
	if ( open my $fh,"<",$file ) {
		push(@nodes,$_) for <$fh>;
	}
	else {
		warn "Unable to read from $file: $!\n";
	}
}

@nodes = (@nodes,@range);

usage() if $inp{h};
usage() unless @nodes;

my $ip   = get_ips();


my $result;
$result->{v6} = doping($ip->{v6}) if $v6;
$result->{v4} = doping($ip->{v4});

print YAML::Syck::Dump $result   if $verbose;
YAML::Syck::DumpFile($dump,$result) if $dump;


if ($filter) {
	# This whole filter thing was added as an afterthought since we may not be using yms to monitor this
	if($result->{v6}){
		send_filter($result->{v6},'v6');
	}
	if($result->{v4}){
		send_filter($result->{v4},'v4');
	}
}

# subs
sub send_filter {
	# Filter is just something that accepts yaml and formats it to the type of data your monitoring expects, then send it to the monitoring.
	my ($res,$type) = @_;
	open my $cmd, "|$filter $type"
		or warn "Unable to open $cmd: [$!]\n";
	if($cmd) {
		my $temp = Dump $res;
		print $cmd $temp;
		close($cmd);
	}
}


sub doping {
	my ($bind) = @_;
	my ($res, $ret);
	my $ping = Net::Oping->new();

	$ret = $ping->bind($bind);
	die "Unable to bind to $bind, returned $ret, error: ",
		$ping->get_error(),"\n" unless $ret;

	if ($ttl) {
		$ret = $ping->ttl($ttl);
		warn "Unable to set ttl $ttl, returned $ret, error: ",
			$ping->get_error(), "\n" unless $ret;
	}

	$ret = $ping->timeout($timeout);
	warn "Unable to set timeout $timeout, returned $ret, error: ",
		$ping->get_error(), "\n" unless $ret;

	for my $node (@nodes) {
		if (1 != $ping->host_add($node) ) {
			warn "Adding $node failed, returned $ret, error: ",
				$ping->get_error(),"\n" unless $ret;
		}
	}

	my $latency = $ping->ping();
	my $error   = $ping->get_error();
	if ($error ne 'Success') {
		warn "Pinger returned error: $error\n";
	}
	my $dropped = $ping->get_dropped();
	my $recvttl = $ping->get_recv_ttl();

	$res->{latency} = $latency;
	$res->{ttl}     = $recvttl;
	$res->{dropped} = $dropped;
	$res->{error}   = $error;

	return $res;
}




# Crazy sub to get ipv6 and ipv4 ip's
#
sub get_ips { 
	my $ip;
	$ip->{v6} = Crazy::get_eth_v6()
	$ip->{v4} = Crazy::get_eth_v4()
	return $ip;
}
